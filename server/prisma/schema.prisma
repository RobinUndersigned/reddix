generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  content     String?
  published   Boolean   @default(false)
  authorId    Int
  User        User      @relation(fields: [authorId], references: [id])
  subreddixId Int
  Subreddix   Subreddix @relation(fields: [subreddixId], references: [id])
  Votes       PostVote[]
  Comments    Comment[]
}

model Comment {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @db.Timestamp(6)
  content   String?
  authorId  Int
  postId    Int
  parentId  Int?
  User      User            @relation(fields: [authorId], references: [id])
  Post      Post            @relation(fields: [postId], references: [id])
  Parent    Comment?        @relation("ParentCommentRelation", fields: [parentId], references: [id])
  Votes     CommentVote[]
  Children  Comment[]       @relation("ParentCommentRelation")
}

model PostVote {
  id        Int      @id @default(autoincrement())
  voteValue Int      @default(0)
  userId    Int
  postId    Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model CommentVote {
  id        Int      @id @default(autoincrement())
  voteValue Int      @default(0)
  userId    Int
  commentId Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id])
  Comment   Comment  @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

model Profile {
  id       Int     @id @default(autoincrement())
  bio      String?
  userId   Int     @unique
  avatarId Int?    @unique
  Avatar   Media?  @relation(fields: [avatarId], references: [id])
  User     User    @relation(fields: [userId], references: [id])
}

model Media {
  id      Int      @id @default(autoincrement())
  type    String   @default("upload")
  title   String?
  file    Bytes    @db.ByteA
  Profile Profile?
}

model User {
  id            Int                                 @id @default(autoincrement())
  firstName     String?                             @db.VarChar(255)
  lastName      String?                             @db.VarChar(255)
  userName      String                              @unique @db.VarChar(255)
  email         String                              @unique @db.VarChar(255)
  password      String?                             @db.VarChar(255)
  role          Role                                @default(USER)
  Posts         Post[]
  Profile       Profile?
  PostVotes     PostVote[]
  CommentVotes  CommentVote[]
  Comments      Comment[]
  Subscriptions UserSubscriptionsOnSubreddix[]
}

model Subreddix {
  id          Int                              @id @default(autoincrement())
  name        String                           @unique @db.VarChar(255)
  url         String                           @unique @db.VarChar(255)
  description String?                          @db.VarChar(255)
  createdAt   DateTime                         @default(now()) @db.Timestamp(6)
  Subscribers UserSubscriptionsOnSubreddix[]
  Posts       Post[]
}

model UserSubscriptionsOnSubreddix {
  Subreddix     Subreddix     @relation(fields: [subreddixId], references: [id])
  subreddixId   Int // relation scalar field (used in the `@relation` attribute above)
  User          User @relation(fields: [userId], references: [id])
  userId        Int // relation scalar field (used in the `@relation` attribute above)
  subscribedAt  DateTime @default(now())

  @@id([userId, subreddixId])
}

enum Role {
  USER
  ADMIN
}
